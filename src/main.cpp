#include "Chat.h"
#include "Console.h"
#include "DB.h"
#include "Server.h"

#include <memory>

auto reconfDB() -> DB::Conf;

int main() {

	auto chat = std::make_shared<Chat>();
	chat->setup(reconfDB());

	auto console = std::make_unique<Console>(chat);

	chat->usersRegist(std::string("test"), std::string("pas"));

	console->routine();

	return 0;

};

//Quick hardcode DB connection reconfiguration
auto reconfDB() -> DB::Conf {

    DB::Conf conf;

    conf.host = "127.0.0.1";
    conf.user = "root";
    conf.passwd = "root";
    conf.db = "test";
    conf.port = 3306;
    conf.unix_socket = "NULL";
    conf.clientflag = 0;

    return conf;

};



/*! @mainpage  Консольный чат

Проект курса C++ на платформе SkillFactory.
Модуль #25  Взаимодействие C++ кода и БД


@section Задание

Теперь вы готовы доработать чат и можете организовать хранение данных чата в базе данных.


@subsection Условие

Есть два основных способа реализации. Вам надо реализовать один из них или придумать и реализовать свой собственный.

1
Традиционный способ — это использование архитектуры клиент-сервер.
В этом случае хранение всех данных происходит в базе данных на сервере.
Клиенту при своём старте необходимо связаться с сервером по IP-адресу сервера и порту,
зарегистрироваться на нём, передав ему свой логин и пароль.
Если регистрация прошла успешно, то сервер в ответ высылает список пользователей и историю сообщений.
Основным достоинством этой архитектуры является то,
что все данные хранятся в одном месте,
и так проще и надёжнее можно организовать целостность базы данных и синхронизацию данных между различными клиентами.

2
Второй способ — это чат с децентрализованной (peer-to-peer, P2P — равный к равному) моделью соединения.
В этом случае каждый клиент должен иметь собственную базу данных,
т.е. каждая программа с чатом является как клиентом, так и выполняет функции сервера.
Основным плюсом такого решения — является то,
что клиенты могут взаимодействовать друг с другом без сервера,
главным же недостатком является сложность синхронизации данных между различными клиентами,
для этой цели потребуются специальные сообщения между всеми клиентами чата.



@subsection Отчет

В качестве итогового решения поставленной задачи каждый участник
* прикладывает в форму ниже ссылку на репозиторий итогового проекта в GitHub
* с обязательным описанием проекта в Readme.

В Readme должна быть указана следующая информация:
- список участников команды;
- имя тимлида (по желанию);
- описание выбранной идеи решения;
- описание пользовательских типов и функций в проекте;
- пояснение, как были распределены задачи в команде (кто какую часть проекта реализовывал).



@subsection Оценка

Домашнее задание проверит ментор и поставит оценку.
Если возникнут сложности, обращайтесь в канал модуля. Желаем успехов! ;)



@section Решение

Выбран клиент-серверный подход.

Функции сервера выполняет сервер БД MySQL - должен работать с настроенными правами доступа.
Сервер предоставляет возможности БД для хранения данных чата.

Функции клиента выполняет программа чата.
Клиент реализует подключение к серверу БД, задает структуру БД.
Для обмена сообщениями между пользователями каждый клиент создает в БД соответствующие записи.

Структура БД:
- users: таблица данных пользователей
- mesgs: таблица текстовых сообщений
- inbox* : таблицы входящих (непрочитанных) сообщений пользователй.



@subsection Зависимости

Для работы программы необходим доступ к MySQL Server.
По умолчанию программа настроена на подключение к тестовой базе данных (схеме) 'test',
которая должна быть создана на сервере заранее сторонними средствами.
При успешном подключении к тестовой базе данных, программа создает свою базу данных (схему)
 и далее работает с ней.
Настройки подключения к серверу MySQL по умолчанию заданы структурой DB::Conf:
	struct Conf {
		std::string host = "127.0.0.1";
		std::string user = "root";
		std::string passwd = "root";
		std::string db = "test";
		unsigned int port = 3306;
		std::string unix_socket = "NULL";
		long clientflag = 0;
	};


@subsection Команда

Задание выполнено самостоятельно.


@subsection Разработка

ОС - ArchLinux x64.

Среда разработки - CodeBlocks.

Документирование - Doxygen.

Контроль версий - git.


@subsection КлючевыеПонятия

Chat (Чат) - клиент БД для работы с конкретным пользователем

Console (Консоль) - пользовательский интерфейс [текстовый в терминале]

Server (Сервер) - сервер БД для работы без привязки к конкретному пользователю

*/
